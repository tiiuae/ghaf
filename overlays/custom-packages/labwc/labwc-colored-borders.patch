From c4614e2dbaacb8cdbfaf2b28933622fb78669540 Mon Sep 17 00:00:00 2001
From: Humaid Alqasimi <humaid.alqassimi@tii.ae>
Date: Sat, 9 Nov 2024 15:23:20 +0400
Subject: [PATCH] Add colored borders

This allows to change the frame color of choosen app by using window
rules. As an example foot terminal has aqua colored frame.

The patch approach was choosen cause there is no better solution
(which should revise the theme handling) ready.

The discussion about better soultion will be held here:
labwc/labwc#1092.

Co-authored-by: dmitry-erin <dmitry.erin@unikie.com>
Signed-off-by: Humaid Alqasimi <humaid.alqassimi@tii.ae>
---
 include/theme.h        | 10 ++++++++++
 include/window-rules.h | 17 +++++++++++++++++
 src/config/rcxml.c     | 12 ++++++++++++
 src/ssd/ssd-border.c   | 17 +++++++++++++----
 src/ssd/ssd-titlebar.c | 23 +++++++++++++++++++++++
 src/ssd/ssd.c          | 10 +++++++---
 src/theme.c            | 34 ++++++++++++++++++++++++++++++++--
 src/window-rules.c     | 25 +++++++++++++++++++++++++
 8 files changed, 139 insertions(+), 9 deletions(-)

diff --git a/include/theme.h b/include/theme.h
index a297e05e..ca8f9cd0 100644
--- a/include/theme.h
+++ b/include/theme.h
@@ -172,4 +172,14 @@ void theme_init(struct theme *theme, struct server *server, const char *theme_na
  */
 void theme_finish(struct theme *theme);
 
+/**
+ * theme_customize_with_border_color - fill in the given theme color fields by custom color
+ * @theme: theme data
+ * @server: server
+ * @color: pointer to color array
+ */
+void theme_customize_with_border_color(struct theme *theme,struct server *server, float *color);
+
+void parse_hexstr(const char *hex, float *rgba);
+
 #endif /* LABWC_THEME_H */
diff --git a/include/window-rules.h b/include/window-rules.h
index 30abfddb..9c566f6d 100644
--- a/include/window-rules.h
+++ b/include/window-rules.h
@@ -21,6 +21,7 @@ enum property {
  *   - 'app_id' for native Wayland windows
  *   - 'WM_CLASS' for XWayland clients
  */
+
 struct window_rule {
 	char *identifier;
 	char *title;
@@ -41,11 +42,27 @@ struct window_rule {
 	enum property want_absorbed_modifier_release_events;
 
 	struct wl_list link; /* struct rcxml.window_rules */
+
+	/* Customisation window title and borders*/
+	bool has_custom_border;
+	float custom_border_color[4];
 };
 
 struct view;
 
+void init_window_rule(struct window_rule *rule);
+
 void window_rules_apply(struct view *view, enum window_rule_event event);
 enum property window_rules_get_property(struct view *view, const char *property);
 
+/**
+ * window_rules_get_custom_border_color - check for presence of custom color in window rules
+ * @view: view data
+ * @color: pointer to color array, where custom color will be copied to
+ * @return: true if color was found or false if not
+ */
+bool window_rules_get_custom_border_color(struct view *view, float *rgba);
+
+
+
 #endif /* LABWC_WINDOW_RULES_H */
diff --git a/src/config/rcxml.c b/src/config/rcxml.c
index bdd84291..7ae29f54 100644
--- a/src/config/rcxml.c
+++ b/src/config/rcxml.c
@@ -36,6 +36,7 @@
 #include "view.h"
 #include "window-rules.h"
 #include "workspaces.h"
+#include "theme.h"
 
 #define LAB_WLR_VERSION_OLDER_THAN(major, minor, micro) \
 	(WLR_VERSION_NUM < (((major) << 16) | ((minor) << 8) | (micro)))
@@ -310,6 +311,7 @@ fill_window_rule(char *nodename, char *content)
 	if (!strcasecmp(nodename, "windowRule.windowRules")) {
 		current_window_rule = znew(*current_window_rule);
 		current_window_rule->window_type = -1; // Window types are >= 0
+		init_window_rule(current_window_rule);
 		wl_list_append(&rc.window_rules, &current_window_rule->link);
 		wl_list_init(&current_window_rule->actions);
 		return;
@@ -324,6 +326,8 @@ fill_window_rule(char *nodename, char *content)
 	/* Criteria */
 	} else if (!strcmp(nodename, "identifier")) {
 		xstrdup_replace(current_window_rule->identifier, content);
+		wlr_log(WLR_INFO, "Identifier found: %s=\"%s\"",
+                        nodename, content);
 	} else if (!strcmp(nodename, "title")) {
 		xstrdup_replace(current_window_rule->title, content);
 	} else if (!strcmp(nodename, "type")) {
@@ -361,6 +365,14 @@ fill_window_rule(char *nodename, char *content)
 	} else if (!strcasecmp(nodename, "wantAbsorbedModifierReleaseEvents")) {
 		set_property(content, &current_window_rule->want_absorbed_modifier_release_events);
 
+	/* Custom border properties: color */
+	} else if (!strcasecmp(nodename, "borderColor")) {
+		parse_hexstr(content, current_window_rule->custom_border_color);
+		current_window_rule->has_custom_border = true;
+		wlr_log(WLR_DEBUG, "Custom borderColor was found in config: %s, parsed into: %f, %f, %f, %f\n",
+                        content, current_window_rule->custom_border_color[0], current_window_rule->custom_border_color[1],
+						current_window_rule->custom_border_color[2], current_window_rule->custom_border_color[3]);
+
 	/* Actions */
 	} else if (!strcmp(nodename, "name.action")) {
 		current_window_rule_action = action_create(content);
diff --git a/src/ssd/ssd-border.c b/src/ssd/ssd-border.c
index 435119e2..f986b6bf 100644
--- a/src/ssd/ssd-border.c
+++ b/src/ssd/ssd-border.c
@@ -6,6 +6,7 @@
 #include "ssd-internal.h"
 #include "theme.h"
 #include "view.h"
+#include "window-rules.h"
 
 #define FOR_EACH_STATE(ssd, tmp) FOR_EACH(tmp, \
 	&(ssd)->border.active, \
@@ -35,10 +36,18 @@ ssd_border_create(struct ssd *ssd)
 	FOR_EACH_STATE(ssd, subtree) {
 		subtree->tree = wlr_scene_tree_create(ssd->border.tree);
 		parent = subtree->tree;
-		active = (subtree == &ssd->border.active) ?
-			THEME_ACTIVE : THEME_INACTIVE;
-		wlr_scene_node_set_enabled(&parent->node, active);
-		color = theme->window[active].border_color;
+
+		/* Here the color changing is enough */
+		float customColor[4];
+		bool isCustomColorAvailable = window_rules_get_custom_border_color(view, customColor);
+		if (isCustomColorAvailable)
+			color = customColor;
+		else  {
+			active = (subtree == &ssd->border.active) ?
+				THEME_ACTIVE : THEME_INACTIVE;
+			wlr_scene_node_set_enabled(&parent->node, active);
+			color = theme->window[active].border_color;
+		}
 
 		wl_list_init(&subtree->parts);
 		add_scene_rect(&subtree->parts, LAB_SSD_PART_LEFT, parent,
diff --git a/src/ssd/ssd-titlebar.c b/src/ssd/ssd-titlebar.c
index 47ab4ef1..a094a0a2 100644
--- a/src/ssd/ssd-titlebar.c
+++ b/src/ssd/ssd-titlebar.c
@@ -17,6 +17,7 @@
 #include "ssd-internal.h"
 #include "theme.h"
 #include "view.h"
+#include "window-rules.h"
 
 #define FOR_EACH_STATE(ssd, tmp) FOR_EACH(tmp, \
 	&(ssd)->titlebar.active, \
@@ -31,6 +32,16 @@ ssd_titlebar_create(struct ssd *ssd)
 {
 	struct view *view = ssd->view;
 	struct theme *theme = view->server->theme;
+
+	/* Here the whole theme changing is more preferable */
+	struct theme custom_theme = {0};
+	float customColor[4];
+	if (window_rules_get_custom_border_color(view, customColor)) {
+		theme_customize_with_border_color(
+			&custom_theme, view->server, customColor);
+		theme = &custom_theme;
+	}
+
 	int width = view->current.width;
 	int corner_width = ssd_get_corner_width();
 
@@ -455,6 +466,18 @@ ssd_update_title(struct ssd *ssd)
 	}
 
 	struct theme *theme = view->server->theme;
+
+	/* Here the whole theme changing is more preferable */
+	struct theme custom_theme = {0};
+	float customColor[4];
+	if (window_rules_get_custom_border_color(view, customColor)) {
+		theme_customize_with_border_color(
+			&custom_theme, view->server, customColor);
+		theme = &custom_theme;
+	}
+	printf("%s %f %f %f %f\n", title, customColor[0], customColor[1],
+		customColor[2], customColor[3]);
+
 	struct ssd_state_title *state = &ssd->state.title;
 	bool title_unchanged = state->text && !strcmp(title, state->text);
 
diff --git a/src/ssd/ssd.c b/src/ssd/ssd.c
index 49f088b7..a4cd9283 100644
--- a/src/ssd/ssd.c
+++ b/src/ssd/ssd.c
@@ -14,6 +14,7 @@
 #include "ssd-internal.h"
 #include "theme.h"
 #include "view.h"
+#include "window-rules.h"
 
 struct border
 ssd_thickness(struct view *view)
@@ -402,9 +403,12 @@ ssd_enable_keybind_inhibit_indicator(struct ssd *ssd, bool enable)
 		return;
 	}
 
-	float *color = enable
-		? rc.theme->window_toggled_keybinds_color
-		: rc.theme->window[THEME_ACTIVE].border_color;
+	float customColor[4];
+	bool isCustomColorAvailable = window_rules_get_custom_border_color(ssd->view, customColor);
+
+	float *color = isCustomColorAvailable ? customColor :
+		(enable ? rc.theme->window_toggled_keybinds_color
+			: rc.theme->window[THEME_ACTIVE].border_color);
 
 	struct ssd_part *part = ssd_get_part(&ssd->border.active.parts, LAB_SSD_PART_TOP);
 	struct wlr_scene_rect *rect = wlr_scene_rect_from_node(part->node);
diff --git a/src/theme.c b/src/theme.c
index 2a7111b2..ba7874c5 100644
--- a/src/theme.c
+++ b/src/theme.c
@@ -497,7 +497,7 @@ hex_to_dec(char c)
  * @hex: hex string to be parsed
  * @rgba: pointer to float[4] for return value
  */
-static void
+void
 parse_hexstr(const char *hex, float *rgba)
 {
 	if (!hex || hex[0] != '#' || strlen(hex) < 7) {
@@ -566,7 +566,7 @@ parse_justification(const char *str)
 static void
 theme_builtin(struct theme *theme, struct server *server)
 {
-	theme->border_width = 1;
+	theme->border_width = 5;
 	theme->window_titlebar_padding_height = 0;
 	theme->window_titlebar_padding_width = 0;
 
@@ -1610,3 +1610,33 @@ theme_finish(struct theme *theme)
 		zdrop(&theme->window[active].shadow_edge);
 	}
 }
+
+void theme_customize_with_border_color(struct theme *theme, struct server
+	*server, float *color)
+{
+	theme_builtin(theme, server);
+
+	/* Read <data-dir>/share/themes/$theme_name/openbox-3/themerc */
+	struct wl_list paths;
+	paths_theme_create(&paths, rc.theme_name, "themerc");
+	theme_read(theme, &paths);
+	paths_destroy(&paths);
+
+	/* Read <config-dir>/labwc/themerc-override */
+	paths_config_create(&paths, "themerc-override");
+	theme_read(theme, &paths);
+	paths_destroy(&paths);
+
+	memcpy(theme->window[THEME_ACTIVE].border_color, color, sizeof(float)*4);
+	memcpy(theme->window[THEME_INACTIVE].border_color, color, sizeof(float)*4);
+	memcpy(theme->window[THEME_ACTIVE].title_bg_color, color, sizeof(float)*4);
+	memcpy(theme->window[THEME_INACTIVE].title_bg_color, color, sizeof(float)*4);
+
+	memcpy(theme->osd_bg_color, color, sizeof(float)*4);
+	memcpy(theme->osd_border_color, color, sizeof(float)*4);
+	memcpy(theme->window_toggled_keybinds_color, color, sizeof(float)*4);
+
+	post_processing(theme);
+	create_corners(theme);
+	load_buttons(theme);
+}
diff --git a/src/window-rules.c b/src/window-rules.c
index 7c88865f..b4b24561 100644
--- a/src/window-rules.c
+++ b/src/window-rules.c
@@ -46,6 +46,14 @@ view_matches_criteria(struct window_rule *rule, struct view *view)
 	return view_matches_query(view, &query);
 }
 
+void
+init_window_rule(struct window_rule *rule)
+{
+	if (!rule) return;
+	rule->has_custom_border = false;
+	memset(rule->custom_border_color, 0, sizeof(float)*4);
+}
+
 void
 window_rules_apply(struct view *view, enum window_rule_event event)
 {
@@ -117,3 +125,20 @@ window_rules_get_property(struct view *view, const char *property)
 	}
 	return LAB_PROP_UNSPECIFIED;
 }
+
+bool
+window_rules_get_custom_border_color(struct view *view, float* rgba)
+{
+	struct window_rule *rule;
+	wl_list_for_each_reverse(rule, &rc.window_rules, link) {
+		if (view_matches_criteria(rule, view)) {
+			if (rule->has_custom_border) {
+				memcpy(rgba, rule->custom_border_color, sizeof(float)*4);
+				wlr_log(WLR_DEBUG, "Custom color was found in window rules list: %f, %f, %f, %f\n", rgba[0], rgba[1], rgba[2], rgba[3]);
+				return true;
+			}
+		}
+	}
+
+	return false;
+}
-- 
2.47.0

