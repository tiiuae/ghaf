From a89bc92a032d6c4fc50d711de92b068a0ed0a636 Mon Sep 17 00:00:00 2001
From: Humaid Alqasimi <humaid.alqassimi@tii.ae>
Date: Thu, 2 May 2024 10:02:56 +0400
Subject: [PATCH] Add colored borders

This allows to change the frame color of choosen app by using window
rules. As an example foot terminal has aqua colored frame.

The patch approach was choosen cause there is no better solution
(which should revise the theme handling) ready.

The discussion about better soultion will be held here:
labwc/labwc#1092.

Co-authored-by: dmitry-erin <dmitry.erin@unikie.com>
Signed-off-by: Humaid Alqasimi <humaid.alqassimi@tii.ae>
---
 include/ssd-internal.h |  5 +++--
 include/theme.h        | 10 ++++++++++
 include/window-rules.h | 17 +++++++++++++++++
 src/config/rcxml.c     | 12 ++++++++++++
 src/ssd/ssd-border.c   | 21 ++++++++++++++++-----
 src/ssd/ssd-part.c     |  2 +-
 src/ssd/ssd-titlebar.c | 30 ++++++++++++++++++++++++++----
 src/ssd/ssd.c          |  9 ++++++---
 src/theme.c            | 34 ++++++++++++++++++++++++++++++++--
 src/window-rules.c     | 25 +++++++++++++++++++++++++
 10 files changed, 148 insertions(+), 17 deletions(-)

diff --git a/include/ssd-internal.h b/include/ssd-internal.h
index fda196e..b0e0cac 100644
--- a/include/ssd-internal.h
+++ b/include/ssd-internal.h
@@ -136,8 +136,9 @@ void add_toggled_icon(struct ssd_button *button, struct wl_list *part_list,
 struct ssd_part *add_scene_button_corner(
 	struct wl_list *part_list, enum ssd_part_type type,
 	enum ssd_part_type corner_type, struct wlr_scene_tree *parent,
-	struct wlr_buffer *corner_buffer, struct wlr_buffer *icon_buffer,
-	struct wlr_buffer *hover_buffer, int x, struct view *view);
+	float *bg_color, struct wlr_buffer *corner_buffer,
+	struct wlr_buffer *icon_buffer, struct wlr_buffer *hover_buffer,
+	int x, struct view *view);
 
 /* SSD internal helpers */
 struct ssd_part *ssd_get_part(
diff --git a/include/theme.h b/include/theme.h
index 50a69f6..7a0f976 100644
--- a/include/theme.h
+++ b/include/theme.h
@@ -162,4 +162,14 @@ void theme_init(struct theme *theme, struct server *server, const char *theme_na
  */
 void theme_finish(struct theme *theme);
 
+/**
+ * theme_customize_with_border_color - fill in the given theme color fields by custom color
+ * @theme: theme data
+ * @server: server
+ * @color: pointer to color array
+ */
+void theme_customize_with_border_color(struct theme *theme,struct server *server, float *color);
+
+void parse_hexstr(const char *hex, float *rgba);
+
 #endif /* LABWC_THEME_H */
diff --git a/include/window-rules.h b/include/window-rules.h
index b93bc36..066cc7f 100644
--- a/include/window-rules.h
+++ b/include/window-rules.h
@@ -21,6 +21,7 @@ enum property {
  *   - 'app_id' for native Wayland windows
  *   - 'WM_CLASS' for XWayland clients
  */
+
 struct window_rule {
 	char *identifier;
 	char *title;
@@ -40,11 +41,27 @@ struct window_rule {
 	enum property fixed_position;
 
 	struct wl_list link; /* struct rcxml.window_rules */
+
+	/* Customisation window title and borders*/
+	bool has_custom_border;
+	float custom_border_color[4];
 };
 
 struct view;
 
+void init_window_rule(struct window_rule *rule);
+
 void window_rules_apply(struct view *view, enum window_rule_event event);
 enum property window_rules_get_property(struct view *view, const char *property);
 
+/**
+ * window_rules_get_custom_border_color - check for presence of custom color in window rules
+ * @view: view data
+ * @color: pointer to color array, where custom color will be copied to
+ * @return: true if color was found or false if not
+ */
+bool window_rules_get_custom_border_color(struct view *view, float *rgba);
+
+
+
 #endif /* LABWC_WINDOW_RULES_H */
diff --git a/src/config/rcxml.c b/src/config/rcxml.c
index 84c117b..daab831 100644
--- a/src/config/rcxml.c
+++ b/src/config/rcxml.c
@@ -35,6 +35,7 @@
 #include "view.h"
 #include "window-rules.h"
 #include "workspaces.h"
+#include "theme.h"
 
 static bool in_regions;
 static bool in_usable_area_override;
@@ -167,6 +168,7 @@ fill_window_rule(char *nodename, char *content)
 	if (!strcasecmp(nodename, "windowRule.windowRules")) {
 		current_window_rule = znew(*current_window_rule);
 		current_window_rule->window_type = -1; // Window types are >= 0
+		init_window_rule(current_window_rule);
 		wl_list_append(&rc.window_rules, &current_window_rule->link);
 		wl_list_init(&current_window_rule->actions);
 		return;
@@ -182,6 +184,8 @@ fill_window_rule(char *nodename, char *content)
 	} else if (!strcmp(nodename, "identifier")) {
 		free(current_window_rule->identifier);
 		current_window_rule->identifier = xstrdup(content);
+		wlr_log(WLR_INFO, "Identifier found: %s=\"%s\"",
+                        nodename, content);
 	} else if (!strcmp(nodename, "title")) {
 		free(current_window_rule->title);
 		current_window_rule->title = xstrdup(content);
@@ -220,6 +224,14 @@ fill_window_rule(char *nodename, char *content)
 	} else if (!strcasecmp(nodename, "fixedPosition")) {
 		set_property(content, &current_window_rule->fixed_position);
 
+	/* Custom border properties: color */
+	} else if (!strcasecmp(nodename, "borderColor")) {
+		parse_hexstr(content, current_window_rule->custom_border_color);
+		current_window_rule->has_custom_border = true;
+		wlr_log(WLR_DEBUG, "Custom borderColor was found in config: %s, parsed into: %f, %f, %f, %f\n",
+                        content, current_window_rule->custom_border_color[0], current_window_rule->custom_border_color[1],
+						current_window_rule->custom_border_color[2], current_window_rule->custom_border_color[3]);
+
 	/* Actions */
 	} else if (!strcmp(nodename, "name.action")) {
 		current_window_rule_action = action_create(content);
diff --git a/src/ssd/ssd-border.c b/src/ssd/ssd-border.c
index 06ce55c..6e2fc06 100644
--- a/src/ssd/ssd-border.c
+++ b/src/ssd/ssd-border.c
@@ -6,6 +6,7 @@
 #include "ssd-internal.h"
 #include "theme.h"
 #include "view.h"
+#include "window-rules.h"
 
 #define FOR_EACH_STATE(ssd, tmp) FOR_EACH(tmp, \
 	&(ssd)->border.active, \
@@ -33,12 +34,22 @@ ssd_border_create(struct ssd *ssd)
 	FOR_EACH_STATE(ssd, subtree) {
 		subtree->tree = wlr_scene_tree_create(ssd->border.tree);
 		parent = subtree->tree;
-		if (subtree == &ssd->border.active) {
-			color = theme->window_active_border_color;
-		} else {
-			color = theme->window_inactive_border_color;
-			wlr_scene_node_set_enabled(&parent->node, false);
+
+		/* Here the color changing is enough */
+		float customColor[4];
+		bool isCustomColorAvailable = window_rules_get_custom_border_color(view, customColor);
+		if (isCustomColorAvailable)
+			color = customColor; 
+		else  {
+			if (subtree == &ssd->border.active) {
+				color = theme->window_active_border_color;
+				wlr_scene_node_set_enabled(&parent->node, true);
+			} else {
+				color = theme->window_inactive_border_color;
+				wlr_scene_node_set_enabled(&parent->node, false);
+			}
 		}
+
 		wl_list_init(&subtree->parts);
 		add_scene_rect(&subtree->parts, LAB_SSD_PART_LEFT, parent,
 			theme->border_width, height, 0, 0, color);
diff --git a/src/ssd/ssd-part.c b/src/ssd/ssd-part.c
index 3933cd1..8889c9e 100644
--- a/src/ssd/ssd-part.c
+++ b/src/ssd/ssd-part.c
@@ -80,7 +80,7 @@ add_scene_buffer(struct wl_list *list, enum ssd_part_type type,
 
 struct ssd_part *
 add_scene_button_corner(struct wl_list *part_list, enum ssd_part_type type,
-		enum ssd_part_type corner_type, struct wlr_scene_tree *parent,
+		enum ssd_part_type corner_type, struct wlr_scene_tree *parent, float *bg_color,
 		struct wlr_buffer *corner_buffer, struct wlr_buffer *icon_buffer,
 		struct wlr_buffer *hover_buffer, int x, struct view *view)
 {
diff --git a/src/ssd/ssd-titlebar.c b/src/ssd/ssd-titlebar.c
index 32d6131..d183e52 100644
--- a/src/ssd/ssd-titlebar.c
+++ b/src/ssd/ssd-titlebar.c
@@ -26,6 +26,15 @@ ssd_titlebar_create(struct ssd *ssd)
 {
 	struct view *view = ssd->view;
 	struct theme *theme = view->server->theme;
+
+	/* Here the whole theme changing is more preferable */
+	struct theme custom_theme = { 0 };
+	float customColor[4];
+	if (window_rules_get_custom_border_color(view, customColor)) {
+		theme_customize_with_border_color(&custom_theme, view->server, customColor);
+		theme = &custom_theme;
+	}
+
 	int width = view->current.width;
 
 	float *color;
@@ -52,6 +61,7 @@ ssd_titlebar_create(struct ssd *ssd)
 		subtree->tree = wlr_scene_tree_create(ssd->titlebar.tree);
 		parent = subtree->tree;
 		wlr_scene_node_set_position(&parent->node, 0, -theme->title_height);
+
 		if (subtree == &ssd->titlebar.active) {
 			color = theme->window_active_title_bg_color;
 			corner_top_left = &theme->corner_top_left_active_normal->base;
@@ -86,6 +96,7 @@ ssd_titlebar_create(struct ssd *ssd)
 
 			wlr_scene_node_set_enabled(&parent->node, false);
 		}
+
 		wl_list_init(&subtree->parts);
 
 		/* Title */
@@ -95,7 +106,7 @@ ssd_titlebar_create(struct ssd *ssd)
 		/* Buttons */
 		add_scene_button_corner(&subtree->parts,
 			LAB_SSD_BUTTON_WINDOW_MENU, LAB_SSD_PART_CORNER_TOP_LEFT, parent,
-			corner_top_left, menu_button_unpressed, menu_button_hover, 0, view);
+			color, corner_top_left, menu_button_unpressed, menu_button_hover, 0, view);
 		add_scene_button(&subtree->parts, LAB_SSD_BUTTON_ICONIFY, parent,
 			color, iconify_button_unpressed, iconify_button_hover,
 			width - SSD_BUTTON_WIDTH * 3, view);
@@ -111,7 +122,7 @@ ssd_titlebar_create(struct ssd *ssd)
 
 		add_scene_button_corner(&subtree->parts,
 			LAB_SSD_BUTTON_CLOSE, LAB_SSD_PART_CORNER_TOP_RIGHT, parent,
-			corner_top_right, close_button_unpressed, close_button_hover,
+			color, corner_top_right, close_button_unpressed, close_button_hover,
 			width - SSD_BUTTON_WIDTH * 1, view);
 	} FOR_EACH_END
 
@@ -149,10 +160,13 @@ set_squared_corners(struct ssd *ssd, bool enable)
 
 			/* Toggle background between invisible and titlebar background color */
 			struct wlr_scene_rect *rect = wlr_scene_rect_from_node(button->background);
-			wlr_scene_rect_set_color(rect, !enable ? (float[4]) {0, 0, 0, 0} : (
+			/*Check for custom color as well*/
+			float customColor[4];
+            		bool isCustomColorAvailable = window_rules_get_custom_border_color(ssd->view, customColor);
+			wlr_scene_rect_set_color(rect, isCustomColorAvailable ? customColor : (!enable ? (float[4]) {0, 0, 0, 0} : (
 				subtree == &ssd->titlebar.active
 					? rc.theme->window_active_title_bg_color
-					: rc.theme->window_inactive_title_bg_color));
+					: rc.theme->window_inactive_title_bg_color)));
 
 			/* Toggle rounded corner image itself */
 			struct wlr_scene_node *rounded_corner =
@@ -348,6 +362,14 @@ ssd_update_title(struct ssd *ssd)
 	}
 
 	struct theme *theme = view->server->theme;
+
+	/* Here the whole theme changing is more preferable */
+	struct theme custom_theme = { 0 };
+	float customColor[4];
+	if (window_rules_get_custom_border_color(view, customColor)) {
+		theme_customize_with_border_color(&custom_theme, view->server, customColor);
+		theme = &custom_theme;
+	}
 	struct ssd_state_title *state = &ssd->state.title;
 	bool title_unchanged = state->text && !strcmp(title, state->text);
 
diff --git a/src/ssd/ssd.c b/src/ssd/ssd.c
index 70b1b0d..9dcc797 100644
--- a/src/ssd/ssd.c
+++ b/src/ssd/ssd.c
@@ -411,9 +411,12 @@ ssd_enable_keybind_inhibit_indicator(struct ssd *ssd, bool enable)
 		return;
 	}
 
-	float *color = enable
-		? rc.theme->window_toggled_keybinds_color
-		: rc.theme->window_active_border_color;
+	float customColor[4];
+	bool isCustomColorAvailable = window_rules_get_custom_border_color(ssd->view, customColor);
+
+	float *color = isCustomColorAvailable ? customColor :
+		(enable ? rc.theme->window_toggled_keybinds_color
+			: rc.theme->window_active_border_color);
 
 	struct ssd_part *part = ssd_get_part(&ssd->border.active.parts, LAB_SSD_PART_TOP);
 	struct wlr_scene_rect *rect = wlr_scene_rect_from_node(part->node);
diff --git a/src/theme.c b/src/theme.c
index 248a352..6f47bba 100644
--- a/src/theme.c
+++ b/src/theme.c
@@ -401,7 +401,7 @@ hex_to_dec(char c)
  * @hex: hex string to be parsed
  * @rgba: pointer to float[4] for return value
  */
-static void
+void
 parse_hexstr(const char *hex, float *rgba)
 {
 	if (!hex || hex[0] != '#' || strlen(hex) < 7) {
@@ -470,7 +470,7 @@ parse_justification(const char *str)
 static void
 theme_builtin(struct theme *theme, struct server *server)
 {
-	theme->border_width = 1;
+	theme->border_width = 5;
 	theme->padding_height = 3;
 	theme->title_height = INT_MIN;
 	theme->menu_overlap_x = 0;
@@ -1433,3 +1433,33 @@ theme_finish(struct theme *theme)
 	zdrop(&theme->shadow_corner_bottom_inactive);
 	zdrop(&theme->shadow_edge_inactive);
 }
+
+void theme_customize_with_border_color(struct theme *theme, struct server
+	*server, float *color)
+{
+	theme_builtin(theme, server);
+
+	/* Read <data-dir>/share/themes/$theme_name/openbox-3/themerc */
+	struct wl_list paths;
+	paths_theme_create(&paths, rc.theme_name, "themerc");
+	theme_read(theme, &paths);
+	paths_destroy(&paths);
+
+	/* Read <config-dir>/labwc/themerc-override */
+	paths_config_create(&paths, "themerc-override");
+	theme_read(theme, &paths);
+	paths_destroy(&paths);
+
+	memcpy(theme->window_active_border_color, color, sizeof(float)*4);
+	memcpy(theme->window_inactive_border_color, color, sizeof(float)*4);
+	memcpy(theme->window_active_title_bg_color, color, sizeof(float)*4);
+	memcpy(theme->window_inactive_title_bg_color, color, sizeof(float)*4);
+
+	memcpy(theme->osd_bg_color, color, sizeof(float)*4);
+	memcpy(theme->osd_border_color, color, sizeof(float)*4);
+	memcpy(theme->window_toggled_keybinds_color, color, sizeof(float)*4);
+
+	post_processing(theme);
+	create_corners(theme);
+	load_buttons(theme);
+}
diff --git a/src/window-rules.c b/src/window-rules.c
index f543f7e..5ea5d53 100644
--- a/src/window-rules.c
+++ b/src/window-rules.c
@@ -43,6 +43,14 @@ view_matches_criteria(struct window_rule *rule, struct view *view)
 	return view_matches_query(view, &query);
 }
 
+void 
+init_window_rule(struct window_rule *rule) 
+{
+	if (!rule) return;
+	rule->has_custom_border = false;
+	memset(rule->custom_border_color, 0, sizeof(float)*4);
+}
+
 void
 window_rules_apply(struct view *view, enum window_rule_event event)
 {
@@ -109,3 +117,20 @@ window_rules_get_property(struct view *view, const char *property)
 	}
 	return LAB_PROP_UNSPECIFIED;
 }
+
+bool
+window_rules_get_custom_border_color(struct view *view, float* rgba)
+{
+	struct window_rule *rule;
+	wl_list_for_each_reverse(rule, &rc.window_rules, link) {
+		if (view_matches_criteria(rule, view)) {
+			if (rule->has_custom_border) {
+				memcpy(rgba, rule->custom_border_color, sizeof(float)*4);
+				wlr_log(WLR_DEBUG, "Custom color was found in window rules list: %f, %f, %f, %f\n", rgba[0], rgba[1], rgba[2], rgba[3]);
+				return true;
+			}
+		}
+	}
+	
+	return false;
+}
-- 
2.44.1

