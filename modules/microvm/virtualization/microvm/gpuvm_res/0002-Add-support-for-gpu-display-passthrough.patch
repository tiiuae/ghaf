From b61148ab819259b8bba60dee9e4625b062549f48 Mon Sep 17 00:00:00 2001
From: Juan Pablo Ruiz <juanpablo.ruiz@unikie.com>
Date: Sun, 19 Jan 2025 23:03:23 +0200
Subject: [PATCH 2/3] Add support for gpu/display passthrough

- Expose nvmap_dma_declare_coherent_memory for nvgpu
- Static tegra_mc_utils_init_t23x initialization parameters
- Submit allocs min size 0x2000 to force CMA
---
 nvidia-oot/drivers/gpu/drm/tegra/submit.c     | 17 +++++++++---
 nvidia-oot/drivers/gpu/drm/tegra/uapi.c       | 11 +++++++-
 .../platform/tegra/mc-utils/mc-utils.c        | 27 +++++++++++++++++++
 .../tegra/nvmap/include/linux/nvmap_exports.h |  3 +++
 .../drivers/video/tegra/nvmap/nvmap_init.c    |  8 ++++++
 5 files changed, 61 insertions(+), 5 deletions(-)

diff --git a/nvidia-oot/drivers/gpu/drm/tegra/submit.c b/nvidia-oot/drivers/gpu/drm/tegra/submit.c
index b489d8b..6323245 100644
--- a/nvidia-oot/drivers/gpu/drm/tegra/submit.c
+++ b/nvidia-oot/drivers/gpu/drm/tegra/submit.c
@@ -214,8 +214,16 @@ static int submit_copy_gather_data(struct gather_bo **pbo, struct device *dev,
 	kref_init(&bo->ref);
 	bo->dev = dev;
 
-	bo->gather_data = dma_alloc_attrs(dev, copy_len, &bo->gather_data_dma,
-					  GFP_KERNEL | __GFP_NOWARN, 0);
+	// TODO: check if needed
+	if(copy_len < 0x2000){
+		copy_len = 0x2000;
+	}
+
+	//bo->gather_data = dma_alloc_attrs(dev, copy_len, &bo->gather_data_dma,
+	//				  GFP_KERNEL | GFP_DMA, DMA_ATTR_WRITE_COMBINE);
+
+	bo->gather_data = dma_alloc_wc(dev, copy_len, &bo->gather_data_dma,
+					  GFP_KERNEL | GFP_DMA);
 	if (!bo->gather_data) {
 		SUBMIT_ERR(context, "failed to allocate memory for gather data");
 		kfree(bo);
@@ -568,8 +576,9 @@ static int submit_init_profiling(struct tegra_drm_context *context,
 	if (!has_timestamping)
 		return 0;
 
-	job_data->timestamps.virt =
-		dma_alloc_coherent(mem_dev, 256, &job_data->timestamps.iova, GFP_KERNEL);
+	job_data->timestamps.virt = 
+		dma_alloc_wc(mem_dev, 0x2000, &job_data->timestamps.iova, GFP_KERNEL | GFP_DMA);
+
 	if (!job_data->timestamps.virt)
 		return -ENOMEM;
 
diff --git a/nvidia-oot/drivers/gpu/drm/tegra/uapi.c b/nvidia-oot/drivers/gpu/drm/tegra/uapi.c
index f5e8953..73c95fd 100644
--- a/nvidia-oot/drivers/gpu/drm/tegra/uapi.c
+++ b/nvidia-oot/drivers/gpu/drm/tegra/uapi.c
@@ -107,9 +107,13 @@ int tegra_drm_ioctl_channel_open(struct drm_device *drm, void *data, struct drm_
 	}
 
 	/* Only allocate context if the engine supports context isolation. */
-	if (device_iommu_mapped(client->base.dev) && client->ops->can_use_memory_ctx) {
+	// TODO: review, maybe this modification is not needed
+	//if (device_iommu_mapped(client->base.dev) && client->ops->can_use_memory_ctx) {
+	if (client->ops->can_use_memory_ctx) {
 		bool supported;
 
+		printk(KERN_INFO "%s, d:%d,  can_use_memory_ctx", __FUNCTION__, __LINE__);
+
 		err = client->ops->can_use_memory_ctx(client, &supported);
 		if (err)
 			goto put_channel;
@@ -131,6 +135,11 @@ int tegra_drm_ioctl_channel_open(struct drm_device *drm, void *data, struct drm_
 			}
 		}
 	}
+	else{
+		printk(KERN_INFO "%s, d:%d, no iommu", __FUNCTION__, __LINE__);
+	}
+
+
 
 	err = xa_alloc(&fpriv->contexts, &args->context, context, XA_LIMIT(1, U32_MAX),
 		       GFP_KERNEL);
diff --git a/nvidia-oot/drivers/platform/tegra/mc-utils/mc-utils.c b/nvidia-oot/drivers/platform/tegra/mc-utils/mc-utils.c
index 2a7d29f..3759868 100644
--- a/nvidia-oot/drivers/platform/tegra/mc-utils/mc-utils.c
+++ b/nvidia-oot/drivers/platform/tegra/mc-utils/mc-utils.c
@@ -379,6 +379,33 @@ static int __init tegra_mc_utils_init_t23x(void)
 		ch_num = get_dram_dt_prop(np, "dram_channels");
 	}
 
+	pr_info("mc-utils: Before");
+	pr_info("mc-utils: rank:   %u", rank);
+	pr_info("mc-utils: ecc:    %u", ecc);
+	pr_info("mc-utils: dram:   %u", dram);
+	pr_info("mc-utils: ch_num: %u", ch_num);
+
+	// In host
+	// [   13.416296] mc-utils: !is_tegra_hypervisor_mode
+	// [   13.416315] mc-utils: rank: 1
+	// [   13.417948] mc-utils: ecc: 0
+	// [   13.417949] mc-utils: dram: 1
+	// [   13.417951] mc-utils: ch_num: 8
+
+
+	rank = 1;
+	ecc = 0;
+	dram = 1;
+	ch_num = 8;
+
+
+	pr_info("mc-utils: After");
+	pr_info("mc-utils: rank:   %u", rank);
+	pr_info("mc-utils: ecc:    %u", ecc);
+	pr_info("mc-utils: dram:   %u", dram);
+	pr_info("mc-utils: ch_num: %u", ch_num);
+	
+
 	emc_param.ecc = ecc;
 	emc_param.rank = rank;
 	emc_param.dram = dram;
diff --git a/nvidia-oot/drivers/video/tegra/nvmap/include/linux/nvmap_exports.h b/nvidia-oot/drivers/video/tegra/nvmap/include/linux/nvmap_exports.h
index 0d10e50..23a5eae 100644
--- a/nvidia-oot/drivers/video/tegra/nvmap/include/linux/nvmap_exports.h
+++ b/nvidia-oot/drivers/video/tegra/nvmap/include/linux/nvmap_exports.h
@@ -10,5 +10,8 @@ void *nvmap_dma_alloc_attrs(struct device *dev, size_t size,
 			    unsigned long attrs);
 void nvmap_dma_free_attrs(struct device *dev, size_t size, void *cpu_addr,
 			  dma_addr_t dma_handle, unsigned long attrs);
+int nvmap_dma_declare_coherent_memory(struct device *dev, phys_addr_t phys_addr,
+			dma_addr_t device_addr, size_t size, int flags, bool is_gpu,
+			u32 granule_size);
 extern struct device tegra_vpr_dev;
 #endif /* __NVMAP_EXPORTS_H */
diff --git a/nvidia-oot/drivers/video/tegra/nvmap/nvmap_init.c b/nvidia-oot/drivers/video/tegra/nvmap/nvmap_init.c
index 0cbf8a4..3a335d0 100644
--- a/nvidia-oot/drivers/video/tegra/nvmap/nvmap_init.c
+++ b/nvidia-oot/drivers/video/tegra/nvmap/nvmap_init.c
@@ -742,6 +742,13 @@ int nvmap_dma_declare_coherent_memory(struct device *dev, phys_addr_t phys_addr,
 	struct dma_coherent_mem_replica *mem;
 	int ret;
 
+	printk(KERN_INFO "%s\n", __FUNCTION__);
+	printk(KERN_INFO "%s: dev_name(dev):  %s\n", __FUNCTION__, dev_name(dev));
+	printk(KERN_INFO "%s, phys_addr:      0x%016llX", __FUNCTION__, (u64)phys_addr);
+	printk(KERN_INFO "%s, device_addr:    0x%016llX", __FUNCTION__, (u64)device_addr);
+	printk(KERN_INFO "%s, size:           0x%016llX", __FUNCTION__, (u64)size);
+	printk(KERN_INFO "%s, flags:          0x%016llX", __FUNCTION__, (u64)flags);
+
 	ret = nvmap_dma_init_coherent_memory(phys_addr, device_addr, size, flags, &mem,
 					     is_gpu, granule_size);
 	if (ret)
@@ -752,6 +759,7 @@ int nvmap_dma_declare_coherent_memory(struct device *dev, phys_addr_t phys_addr,
 		nvmap_dma_release_coherent_memory(mem);
 	return ret;
 }
+EXPORT_SYMBOL(nvmap_dma_declare_coherent_memory);
 #endif /* LINUX_VERSION_CODE */
 
 static int __init nvmap_co_device_init(struct reserved_mem *rmem,
-- 
2.34.1

