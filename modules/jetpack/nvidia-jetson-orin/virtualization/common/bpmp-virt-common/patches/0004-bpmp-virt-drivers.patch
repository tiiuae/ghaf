---
 drivers/Kconfig                             |   8 +
 drivers/Makefile                            |   5 +
 drivers/bpmp-guest-proxy/Kconfig            |  11 +
 drivers/bpmp-guest-proxy/Makefile           |   1 +
 drivers/bpmp-guest-proxy/bpmp-guest-proxy.c | 444 ++++++++++++++++++
 drivers/bpmp-host-proxy/Kconfig             |  10 +
 drivers/bpmp-host-proxy/Makefile            |   1 +
 drivers/bpmp-host-proxy/bpmp-host-proxy.c   | 470 ++++++++++++++++++++
 drivers/bpmp-host-proxy/bpmp-host-proxy.h   |  17 +
 9 files changed, 967 insertions(+)
 create mode 100644 drivers/bpmp-guest-proxy/Kconfig
 create mode 100644 drivers/bpmp-guest-proxy/Makefile
 create mode 100644 drivers/bpmp-guest-proxy/bpmp-guest-proxy.c
 create mode 100644 drivers/bpmp-host-proxy/Kconfig
 create mode 100644 drivers/bpmp-host-proxy/Makefile
 create mode 100755 drivers/bpmp-host-proxy/bpmp-host-proxy.c
 create mode 100644 drivers/bpmp-host-proxy/bpmp-host-proxy.h

diff --git a/drivers/Kconfig b/drivers/Kconfig
index dcecc9f6e33f..39e2e85ac893 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -236,3 +236,11 @@ source "drivers/counter/Kconfig"
 
 source "drivers/most/Kconfig"
 endmenu
+append_menu "Device Drivers"
+
+if ARCH_TEGRA
+source "drivers/bpmp-host-proxy/Kconfig"
+source "drivers/bpmp-guest-proxy/Kconfig"
+endif
+
+endmenu
# bugfix hack -- this patch conflicts with gpio patches. We let gpio do this particluar patch on ./drivers/Makefile
#diff --git a/drivers/Makefile b/drivers/Makefile
#index d3500440b928..06cb4bc1c69c 100644
#--- a/drivers/Makefile
#+++ b/drivers/Makefile
#@@ -191,3 +191,5 @@ obj-$(CONFIG_GNSS)		+= gnss/
# obj-$(CONFIG_INTERCONNECT)	+= interconnect/
# obj-$(CONFIG_COUNTER)		+= counter/
# obj-$(CONFIG_MOST)		+= most/
#+obj-y	+= bpmp-host-proxy/
#+obj-y	+= bpmp-guest-proxy/
diff --git a/drivers/bpmp-guest-proxy/Kconfig b/drivers/bpmp-guest-proxy/Kconfig
new file mode 100644
index 000000000000..33877730ad5b
--- /dev/null
+++ b/drivers/bpmp-guest-proxy/Kconfig
@@ -0,0 +1,11 @@
+config TEGRA_BPMP_GUEST_PROXY
+	bool "Tegra BPMP guest proxy driver"
+	depends on TEGRA_BPMP
+	help
+	The Tegra BPMP guest proxy driver, virtualize the BPMP transfer
+	function, allowing the guest to have access to the host BPMP.
+
+	Say Y here to enable this driver and to compile this driver as a module, 
+	choose M here. If unsure, say N
+
+
diff --git a/drivers/bpmp-guest-proxy/Makefile b/drivers/bpmp-guest-proxy/Makefile
new file mode 100644
index 000000000000..ac22344a1596
--- /dev/null
+++ b/drivers/bpmp-guest-proxy/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_TEGRA_BPMP_GUEST_PROXY) += bpmp-guest-proxy.o
diff --git a/drivers/bpmp-guest-proxy/bpmp-guest-proxy.c b/drivers/bpmp-guest-proxy/bpmp-guest-proxy.c
new file mode 100644
index 000000000000..c4177435168a
--- /dev/null
+++ b/drivers/bpmp-guest-proxy/bpmp-guest-proxy.c
@@ -0,0 +1,444 @@
+/**
+ * 
+ * NVIDIA BPMP Guest Proxy Kernel Module
+ * (c) 2023 Unikie, Oy
+ * (c) 2023 Vadim Likholetov vadim.likholetov@unikie.com
+ * 
+*/
+#include <linux/module.h>	  // Core header for modules.
+#include <linux/device.h>	  // Supports driver model.
+#include <linux/kernel.h>	  // Kernel header for convenient functions.
+#include <linux/fs.h>		  // File-system support.
+#include <linux/uaccess.h>	  // User access copy function support.
+#include <linux/slab.h>
+#include <linux/mm.h>
+#include <linux/memory_hotplug.h>
+#include <linux/io.h>
+#include <soc/tegra/bpmp.h>
+
+
+#define DEVICE_NAME "bpmp-guest" // Device name.
+#define CLASS_NAME "char"	  
+
+MODULE_LICENSE("GPL");						 
+MODULE_AUTHOR("Vadim Likholetov");					 
+MODULE_DESCRIPTION("NVidia BPMP Guest Proxy Kernel Module"); 
+MODULE_VERSION("0.1");				 
+
+
+#define TX_BUF         0x0000
+#define RX_BUF         0x0200
+#define TX_SIZ         0x0400
+#define RX_SIZ         0x0408
+#define RET_COD        0x0410
+#define MRQ            0x0500
+#define MEM_SIZE       0x0600
+#define MESSAGE_SIZE   0x0200
+
+
+#define BPMP_GUEST_VERBOSE    0
+
+#if BPMP_GUEST_VERBOSE
+#define deb_info(...)     printk(KERN_INFO DEVICE_NAME ": "__VA_ARGS__)
+#else
+#define deb_info(...)
+#endif
+
+#define deb_error(...)    printk(KERN_ALERT DEVICE_NAME ": "__VA_ARGS__)
+
+
+static volatile void __iomem  *mem_iova = NULL;
+
+extern int tegra_bpmp_transfer(struct tegra_bpmp *, struct tegra_bpmp_message *);
+extern struct tegra_bpmp *tegra_bpmp_host_device;
+int my_tegra_bpmp_transfer(struct tegra_bpmp *, struct tegra_bpmp_message *);
+
+
+extern int (*tegra_bpmp_transfer_redirect)(struct tegra_bpmp *, struct tegra_bpmp_message *);
+extern int tegra_bpmp_outloud;
+extern uint64_t bpmp_vpa;
+
+
+/**
+ * Important variables that store data and keep track of relevant information.
+ */
+static int major_number;
+
+static struct class *bpmp_guest_proxy_class = NULL;	///< The device-driver class struct pointer
+static struct device *bpmp_guest_proxy_device = NULL; ///< The device-driver device struct pointer
+
+/**
+ * Prototype functions for file operations.
+ */
+static int open(struct inode *, struct file *);
+static int close(struct inode *, struct file *);
+static ssize_t read(struct file *, char *, size_t, loff_t *);
+static ssize_t write(struct file *, const char *, size_t, loff_t *);
+
+/**
+ * File operations structure and the functions it points to.
+ */
+static struct file_operations fops =
+	{
+		.owner = THIS_MODULE,
+		.open = open,
+		.release = close,
+		.read = read,
+		.write = write,
+};
+
+
+#if BPMP_GUEST_VERBOSE
+// Usage:
+//     hexDump(desc, addr, len, perLine);
+//         desc:    if non-NULL, printed as a description before hex dump.
+//         addr:    the address to start dumping from.
+//         len:     the number of bytes to dump.
+//         perLine: number of bytes on each output line.
+void static hexDump (
+    const char * desc,
+    const void * addr,
+    const int len
+) {
+    // Silently ignore silly per-line values.
+
+    int i;
+    unsigned char buff[17];
+	unsigned char out_buff[200];
+	unsigned char *p_out_buff = out_buff;
+    const unsigned char * pc = (const unsigned char *)addr;
+
+
+
+    // Output description if given.
+
+    if (desc != NULL) printk ("%s:\n", desc);
+
+    // Length checks.
+
+    if (len == 0) {
+        printk("  ZERO LENGTH\n");
+        return;
+    }
+    if (len < 0) {
+        printk("  NEGATIVE LENGTH: %d\n", len);
+        return;
+    }
+
+	if(len > 2046){
+        printk("  VERY LONG: %d\n", len);
+        return;
+    }
+
+    // Process every byte in the data.
+
+    for (i = 0; i < len; i++) {
+        // Multiple of perLine means new or first line (with line offset).
+
+        if ((i % 16) == 0) {
+            // Only print previous-line ASCII buffer for lines beyond first.
+
+            if (i != 0) {
+				p_out_buff += sprintf (p_out_buff, "  %s\n", buff);
+				printk("%s", out_buff);
+				memset(out_buff, 0, sizeof(out_buff));
+				p_out_buff = out_buff;
+			}
+            // Output the offset of current line.
+
+            p_out_buff += sprintf (p_out_buff,"  %04x ", i);
+        }
+
+        // Now the hex code for the specific character.
+
+        p_out_buff += sprintf (p_out_buff, " %02x", pc[i]);
+
+        // And buffer a printable ASCII character for later.
+
+        if ((pc[i] < 0x20) || (pc[i] > 0x7e)) // isprint() may be better.
+            buff[i % 16] = '.';
+        else
+            buff[i % 16] = pc[i];
+        buff[(i % 16) + 1] = '\0';
+    }
+
+    // Pad out last line if not exactly perLine characters.
+
+    while ((i % 16) != 0) {
+        p_out_buff += sprintf (p_out_buff, "   ");
+        i++;
+    }
+
+    // And print the final ASCII buffer.
+
+    p_out_buff += sprintf (p_out_buff, "  %s\n", buff);
+
+	printk("%s", out_buff);
+}
+#else
+	#define hexDump(...)
+#endif
+
+/**
+ * Initializes module at installation
+ */
+int tegra_bpmp_guest_init(void)
+{
+
+	
+	deb_info("%s, installing module.", __func__);
+
+	deb_info("bpmp_vpa: 0x%llX", bpmp_vpa);
+
+	if(!bpmp_vpa){
+		deb_error("Failed, bpmp_vpa not defined\n");
+	}
+
+	// Allocate a major number for the device.
+	major_number = register_chrdev(0, DEVICE_NAME, &fops);
+	if (major_number < 0)
+	{
+		deb_error("could not register number.\n");
+		return major_number;
+	}
+	deb_info("registered correctly with major number %d\n", major_number);
+
+	// Register the device class
+	bpmp_guest_proxy_class = class_create(THIS_MODULE, CLASS_NAME);
+	if (IS_ERR(bpmp_guest_proxy_class))
+	{ // Check for error and clean up if there is
+		unregister_chrdev(major_number, DEVICE_NAME);
+		deb_error("Failed to register device class\n");
+		return PTR_ERR(bpmp_guest_proxy_class); // Correct way to return an error on a pointer
+	}
+	deb_info("device class registered correctly\n");
+
+	// Register the device driver
+	bpmp_guest_proxy_device = device_create(bpmp_guest_proxy_class, NULL, MKDEV(major_number, 0), NULL, DEVICE_NAME);
+	if (IS_ERR(bpmp_guest_proxy_device))
+	{								 // Clean up if there is an error
+		class_destroy(bpmp_guest_proxy_class); 
+		unregister_chrdev(major_number, DEVICE_NAME);
+		deb_error("Failed to create the device\n");
+		return PTR_ERR(bpmp_guest_proxy_device);
+	}
+	deb_info("device class created correctly\n"); // Made it! device was initialized
+
+	// map iomem
+	mem_iova = ioremap(bpmp_vpa, MEM_SIZE);
+
+	if (!mem_iova) {
+        deb_error("ioremap failed\n");
+        return -ENOMEM;
+    }
+
+	deb_info("bpmp_vpa: 0x%llX, mem_iova: %p\n", bpmp_vpa, mem_iova);
+
+	tegra_bpmp_transfer_redirect = my_tegra_bpmp_transfer; // Hook func
+
+	return 0;
+}
+
+EXPORT_SYMBOL(tegra_bpmp_guest_init);
+
+
+
+/*
+ * Removes module, sends appropriate message to kernel
+ */
+void tegra_bpmp_guest_cleanup(void)
+{
+	deb_info("removing module.\n");
+
+	// unmap iomem
+	iounmap((void __iomem*)bpmp_vpa);
+
+    tegra_bpmp_transfer_redirect = NULL;   // unhook function
+	device_destroy(bpmp_guest_proxy_class, MKDEV(major_number, 0)); // remove the device
+	class_unregister(bpmp_guest_proxy_class);						  // unregister the device class
+	class_destroy(bpmp_guest_proxy_class);						  // remove the device class
+	unregister_chrdev(major_number, DEVICE_NAME);		  // unregister the major number
+	deb_info("Goodbye from the LKM!\n");
+	unregister_chrdev(major_number, DEVICE_NAME);
+	return;
+}
+
+/*
+ * Opens device module, sends appropriate message to kernel
+ */
+static int open(struct inode *inodep, struct file *filep)
+{
+	deb_info("device opened.\n");
+    tegra_bpmp_outloud = 1;
+	return 0;
+}
+
+/*
+ * Closes device module, sends appropriate message to kernel
+ */
+static int close(struct inode *inodep, struct file *filep)
+{
+	deb_info("device closed.\n");
+    tegra_bpmp_outloud = 0;
+	return 0;
+}
+
+/*
+ * Reads from device, displays in userspace, and deletes the read data
+ */
+static ssize_t read(struct file *filep, char *buffer, size_t len, loff_t *offset)
+{
+	deb_info("read stub");
+	return 0;
+}
+
+
+
+int my_tegra_bpmp_transfer(struct tegra_bpmp *bpmp, struct tegra_bpmp_message *msg)
+{   
+
+	unsigned char io_buffer[MEM_SIZE];
+	deb_info("%s\n", __func__);
+
+	memset(io_buffer, 0, sizeof(io_buffer));
+	
+    if (msg->tx.size >= MESSAGE_SIZE)
+        return -EINVAL;
+
+	// Copy msg, tx data and rx data to a single io_buffer
+    memcpy(&io_buffer[TX_BUF], msg->tx.data, msg->tx.size);
+	memcpy(&io_buffer[TX_SIZ], &msg->tx.size, sizeof(msg->tx.size));
+	
+	memcpy(&io_buffer[RX_BUF], msg->rx.data, msg->rx.size);
+	memcpy(&io_buffer[RX_SIZ], &msg->rx.size, sizeof(msg->rx.size));
+
+	memcpy(&io_buffer[MRQ], &msg->mrq, sizeof(msg->mrq));
+	
+
+    hexDump("msg", &msg, sizeof(struct tegra_bpmp_message));
+    deb_info("msg.tx.data: %p\n", msg->tx.data);
+    hexDump("msg.tx.data", msg->tx.data, msg->tx.size);
+	deb_info("msg->rx.size: %ld\n", msg->rx.size);
+	
+	// Execute the request by coping the io_buffer
+	memcpy_toio(mem_iova, io_buffer, MEM_SIZE);
+
+	// Read response to io_buffer
+	memcpy_fromio(io_buffer, mem_iova, MEM_SIZE);
+
+	// Copy from io_buffer to msg, tx data and rx data
+	memcpy(&msg->tx.size, &io_buffer[TX_SIZ], sizeof(msg->tx.size));
+    memcpy((void *)msg->tx.data, &io_buffer[TX_BUF], msg->tx.size);
+
+	memcpy(&msg->rx.size, &io_buffer[RX_SIZ], sizeof(msg->rx.size));
+	memcpy(msg->rx.data, &io_buffer[RX_BUF], msg->rx.size);
+	
+	memcpy(&msg->rx.ret, &io_buffer[RET_COD], sizeof(msg->rx.ret));
+
+	deb_info("%s, END ret: %d\n", __func__, msg->rx.ret);
+
+    return msg->rx.ret;
+}
+
+/*
+ * Writes to the device
+ */
+
+#define BUF_SIZE 1024 
+
+static ssize_t write(struct file *filep, const char *buffer, size_t len, loff_t *offset)
+{
+
+	int ret = len;
+	struct tegra_bpmp_message *kbuf = NULL;
+	void *txbuf = NULL;
+	void *rxbuf = NULL;
+	void *usertxbuf = NULL;
+	void *userrxbuf = NULL;
+
+	if (len > 65535) {	/* paranoia */
+		deb_error("count %zu exceeds max # of bytes allowed, "
+			"aborting write\n", len);
+		goto out_nomem;
+	}
+
+	deb_info(" wants to write %zu bytes\n", len);
+
+	if (len!=sizeof(struct tegra_bpmp_message ))
+	{
+		deb_error("message size %zu != %zu", len, sizeof(struct tegra_bpmp_message));
+		goto out_notok;
+	}
+
+	ret = -ENOMEM;
+	kbuf = kmalloc(len, GFP_KERNEL);
+	txbuf = kmalloc(BUF_SIZE, GFP_KERNEL);
+	rxbuf = kmalloc(BUF_SIZE, GFP_KERNEL);
+
+	if (!kbuf || !txbuf || !rxbuf)
+		goto out_nomem;
+
+	memset(kbuf, 0, len);
+	memset(txbuf, 0, len);
+	memset(rxbuf, 0, len);
+
+	ret = -EFAULT;
+	
+	if (copy_from_user(kbuf, buffer, len)) {
+		deb_error("copy_from_user(1) failed\n");
+		goto out_cfu;
+	}
+
+	if (copy_from_user(txbuf, kbuf->tx.data, kbuf->tx.size)) {
+		deb_error("copy_from_user(2) failed\n");
+		goto out_cfu;
+	}
+
+	if (copy_from_user(rxbuf, kbuf->rx.data, kbuf->rx.size)) {
+		deb_error("copy_from_user(3) failed\n");
+		goto out_cfu;
+	}	
+
+	usertxbuf = (void*)kbuf->tx.data; //save userspace buffers addresses
+	userrxbuf = kbuf->rx.data;
+
+	kbuf->tx.data=txbuf; //reassing to kernel space buffers
+	kbuf->rx.data=rxbuf;
+
+
+	ret = tegra_bpmp_transfer(tegra_bpmp_host_device, (struct tegra_bpmp_message *)kbuf);
+
+
+
+	if (copy_to_user((void *)usertxbuf, kbuf->tx.data, kbuf->tx.size)) {
+		deb_error("copy_to_user(2) failed\n");
+		goto out_notok;
+	}
+
+	if (copy_to_user((void *)userrxbuf, kbuf->rx.data, kbuf->rx.size)) {
+		deb_error("copy_to_user(3) failed\n");
+		goto out_notok;
+	}
+
+	kbuf->tx.data=usertxbuf;
+	kbuf->rx.data=userrxbuf;
+	
+	if (copy_to_user((void *)buffer, kbuf, len)) {
+		deb_error("copy_to_user(1) failed\n");
+		goto out_notok;
+	}
+
+
+
+	kfree(kbuf);
+	return len;
+out_notok:
+out_nomem:
+	deb_error ("memory allocation failed");
+out_cfu:
+	kfree(kbuf);
+	kfree(txbuf);
+	kfree(rxbuf);
+    return -EINVAL;
+}
+
diff --git a/drivers/bpmp-host-proxy/Kconfig b/drivers/bpmp-host-proxy/Kconfig
new file mode 100644
index 000000000000..08eb89367064
--- /dev/null
+++ b/drivers/bpmp-host-proxy/Kconfig
@@ -0,0 +1,10 @@
+config TEGRA_BPMP_HOST_PROXY
+    depends on TEGRA_BPMP
+	bool "Tegra BPMP host proxy support"
+	help
+	  Exposes the BPMP capabilities to the user level, in order to support the 
+	  BPMP dependent devices passthrough to the virtual machines.
+
+	  Say Y here to enable this driver and to compile this driver as a module, 
+	  choose M here. If unsure, say N
+
diff --git a/drivers/bpmp-host-proxy/Makefile b/drivers/bpmp-host-proxy/Makefile
new file mode 100644
index 000000000000..ecc7233d8360
--- /dev/null
+++ b/drivers/bpmp-host-proxy/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_TEGRA_BPMP_HOST_PROXY) += bpmp-host-proxy.o
diff --git a/drivers/bpmp-host-proxy/bpmp-host-proxy.c b/drivers/bpmp-host-proxy/bpmp-host-proxy.c
new file mode 100755
index 000000000000..e20d50428b11
--- /dev/null
+++ b/drivers/bpmp-host-proxy/bpmp-host-proxy.c
@@ -0,0 +1,470 @@
+/**
+ * 
+ * NVIDIA BPMP Host Proxy Kernel Module
+ * (c) 2023 Unikie, Oy
+ * (c) 2023 Vadim Likholetov vadim.likholetov@unikie.com
+ * 
+*/
+#include <linux/module.h>	  // Core header for modules.
+#include <linux/device.h>	  // Supports driver model.
+#include <linux/kernel.h>	  // Kernel header for convenient functions.
+#include <linux/fs.h>		  // File-system support.
+#include <linux/uaccess.h>	  // User access copy function support.
+#include <linux/slab.h>
+#include <soc/tegra/bpmp.h>
+#include <linux/platform_device.h>
+#include "bpmp-host-proxy.h"
+
+
+#define DEVICE_NAME "bpmp-host"   // Device name.
+#define CLASS_NAME  "chardrv"	  // < The device class -- this is a character device driver
+
+MODULE_LICENSE("GPL");						 ///< The license type -- this affects available functionality
+MODULE_AUTHOR("Vadim Likholetov");					 ///< The author -- visible when you use modinfo
+MODULE_DESCRIPTION("NVidia BPMP Host Proxy Kernel Module"); ///< The description -- see modinfo
+MODULE_VERSION("0.1");						 ///< A version number to inform users
+
+
+#define BPMP_HOST_VERBOSE    0
+
+#if BPMP_HOST_VERBOSE
+#define deb_info(...)     printk(KERN_INFO DEVICE_NAME ": "__VA_ARGS__)
+#else
+#define deb_info(...)
+#endif
+
+#define deb_error(...)    printk(KERN_ALERT DEVICE_NAME ": "__VA_ARGS__)
+
+/**
+ * Important variables that store data and keep track of relevant information.
+ */
+static int major_number;
+
+static struct class *bpmp_host_proxy_class = NULL;	///< The device-driver class struct pointer
+static struct device *bpmp_host_proxy_device = NULL; ///< The device-driver device struct pointer
+
+/**
+ * Prototype functions for file operations.
+ */
+static int open(struct inode *, struct file *);
+static int close(struct inode *, struct file *);
+static ssize_t read(struct file *, char *, size_t, loff_t *);
+static ssize_t write(struct file *, const char *, size_t, loff_t *);
+
+/**
+ * File operations structure and the functions it points to.
+ */
+static struct file_operations fops =
+	{
+		.owner = THIS_MODULE,
+		.open = open,
+		.release = close,
+		.read = read,
+		.write = write,
+};
+
+// BPMP allowed resources structure
+static struct bpmp_allowed_res bpmp_ares; 
+
+#if BPMP_HOST_VERBOSE
+// Usage:
+//     hexDump(desc, addr, len, perLine);
+//         desc:    if non-NULL, printed as a description before hex dump.
+//         addr:    the address to start dumping from.
+//         len:     the number of bytes to dump.
+//         perLine: number of bytes on each output line.
+void static hexDump (
+    const char * desc,
+    const void * addr,
+    const int len
+) {
+    // Silently ignore silly per-line values.
+
+    int i;
+    unsigned char buff[17];
+	unsigned char out_buff[4000];
+	unsigned char *p_out_buff = out_buff;
+    const unsigned char * pc = (const unsigned char *)addr;
+
+
+
+    // Output description if given.
+
+    if (desc != NULL) printk ("%s:\n", desc);
+
+    // Length checks.
+
+    if (len == 0) {
+        printk(DEVICE_NAME ":   ZERO LENGTH\n");
+        return;
+    }
+    if (len < 0) {
+        printk(DEVICE_NAME ":   NEGATIVE LENGTH: %d\n", len);
+        return;
+    }
+
+	if(len > 400){
+        printk(DEVICE_NAME ":   VERY LONG: %d\n", len);
+        return;
+    }
+
+    // Process every byte in the data.
+
+    for (i = 0; i < len; i++) {
+        // Multiple of perLine means new or first line (with line offset).
+
+        if ((i % 16) == 0) {
+            // Only print previous-line ASCII buffer for lines beyond first.
+
+            if (i != 0) {
+				p_out_buff += sprintf (p_out_buff, "  %s\n", buff);
+			}
+            // Output the offset of current line.
+
+            p_out_buff += sprintf (p_out_buff,"  %04x ", i);
+        }
+
+        // Now the hex code for the specific character.
+
+        p_out_buff += sprintf (p_out_buff, " %02x", pc[i]);
+
+        // And buffer a printable ASCII character for later.
+
+        if ((pc[i] < 0x20) || (pc[i] > 0x7e)) // isprint() may be better.
+            buff[i % 16] = '.';
+        else
+            buff[i % 16] = pc[i];
+        buff[(i % 16) + 1] = '\0';
+    }
+
+    // Pad out last line if not exactly perLine characters.
+
+    while ((i % 16) != 0) {
+        p_out_buff += sprintf (p_out_buff, "   ");
+        i++;
+    }
+
+    // And print the final ASCII buffer.
+
+    p_out_buff += sprintf (p_out_buff, "  %s\n", buff);
+
+	printk(DEVICE_NAME ": %s", out_buff);
+}
+#else
+	#define hexDump(...)
+#endif
+
+/**
+ * Initializes module at installation
+ */
+static int bpmp_host_proxy_probe(struct platform_device *pdev)
+{
+	int i;
+	
+	deb_info("%s, installing module.", __func__);
+
+	// Read allowed clocks and reset from the device tree
+	// if clocks or resets are not defined, not initialize the module
+	bpmp_ares.clocks_size = of_property_read_variable_u32_array(pdev->dev.of_node, 
+		"allowed-clocks", bpmp_ares.clock, 0, BPMP_HOST_MAX_CLOCKS_SIZE);
+
+	if(bpmp_ares.clocks_size <= 0){
+		deb_error("No allowed clocks defined");
+		return EINVAL;
+	}
+
+	deb_info("bpmp_ares.clocks_size: %d", bpmp_ares.clocks_size);
+	for (i = 0; i < bpmp_ares.clocks_size; i++)	{
+		deb_info("bpmp_ares.clock %d", bpmp_ares.clock[i]);
+	}
+
+	bpmp_ares.resets_size = of_property_read_variable_u32_array(pdev->dev.of_node, 
+		"allowed-resets", bpmp_ares.reset, 0, BPMP_HOST_MAX_RESETS_SIZE);
+
+	if(bpmp_ares.resets_size <= 0){
+		deb_error("No allowed resets defined");
+		return EINVAL;
+	}
+
+	deb_info("bpmp_ares.resets_size: %d", bpmp_ares.resets_size);
+	for (i = 0; i < bpmp_ares.resets_size; i++)	{
+		deb_info("bpmp_ares.reset %d", bpmp_ares.reset[i]);
+	}
+
+
+	// Allocate a major number for the device.
+	major_number = register_chrdev(0, DEVICE_NAME, &fops);
+	if (major_number < 0)
+	{
+		deb_error("could not register number.\n");
+		return major_number;
+	}
+	deb_info("registered correctly with major number %d\n", major_number);
+
+	// Register the device class
+	bpmp_host_proxy_class = class_create(THIS_MODULE, CLASS_NAME);
+	if (IS_ERR(bpmp_host_proxy_class))
+	{ // Check for error and clean up if there is
+		unregister_chrdev(major_number, DEVICE_NAME);
+		deb_error("Failed to register device class\n");
+		return PTR_ERR(bpmp_host_proxy_class); // Correct way to return an error on a pointer
+	}
+	deb_info("device class registered correctly\n");
+
+	// Register the device driver
+	bpmp_host_proxy_device = device_create(bpmp_host_proxy_class, NULL, MKDEV(major_number, 0), NULL, DEVICE_NAME);
+	if (IS_ERR(bpmp_host_proxy_device))
+	{								 // Clean up if there is an error
+		class_destroy(bpmp_host_proxy_class); 
+		unregister_chrdev(major_number, DEVICE_NAME);
+		deb_error("Failed to create the device\n");
+		return PTR_ERR(bpmp_host_proxy_device);
+	}
+
+	deb_info("device class created correctly\n"); // Made it! device was initialized
+
+	return 0;
+}
+
+
+
+/*
+ * Removes module, sends appropriate message to kernel
+ */
+static int bpmp_host_proxy_remove(struct platform_device *pdev)
+{
+	deb_info("removing module.\n");
+	device_destroy(bpmp_host_proxy_class, MKDEV(major_number, 0)); // remove the device
+	class_unregister(bpmp_host_proxy_class);						  // unregister the device class
+	class_destroy(bpmp_host_proxy_class);						  // remove the device class
+	unregister_chrdev(major_number, DEVICE_NAME);		  // unregister the major number
+	deb_info("Goodbye from the LKM!\n");
+	unregister_chrdev(major_number, DEVICE_NAME);
+	return 0;
+}
+
+/*
+ * Opens device module, sends appropriate message to kernel
+ */
+static int open(struct inode *inodep, struct file *filep)
+{
+	deb_info("device opened.\n");
+	return 0;
+}
+
+/*
+ * Closes device module, sends appropriate message to kernel
+ */
+static int close(struct inode *inodep, struct file *filep)
+{
+	deb_info("device closed.\n");
+	return 0;
+}
+
+/*
+ * Reads from device, displays in userspace, and deletes the read data
+ */
+static ssize_t read(struct file *filep, char *buffer, size_t len, loff_t *offset)
+{
+	deb_info("read stub");
+	return 0;
+}
+
+/*
+ * Checks if the msg that wants to transmit through the
+ * bpmp-host is allowed by the device tree configuration
+ */
+static bool check_if_allowed(struct tegra_bpmp_message *msg)
+{
+	struct mrq_reset_request *reset_req = NULL;
+	struct mrq_clk_request *clock_req = NULL;
+	uint32_t clk_cmd = 0;
+	int i = 0;
+
+	// Allow get information mrq
+	if(msg->mrq == MRQ_PING ||
+	   msg->mrq == MRQ_QUERY_TAG ||
+	   msg->mrq == MRQ_THREADED_PING ||
+	   msg->mrq == MRQ_QUERY_ABI ||
+	   msg->mrq == MRQ_QUERY_FW_TAG ){
+		return true;
+	}
+
+	// Check for reset and clock mrq
+	if(msg->mrq == MRQ_RESET){
+		reset_req = (struct mrq_reset_request*) msg->tx.data;
+
+		for(i = 0; i < bpmp_ares.resets_size; i++){
+			if(bpmp_ares.reset[i] == reset_req->reset_id){
+				return true;
+			}
+		}
+		deb_error("Error, reset not allowed for: %d", reset_req->reset_id);
+		return false;
+	}
+	else if (msg->mrq == MRQ_CLK){
+		clock_req = (struct mrq_clk_request*) msg->tx.data;
+
+		for(i = 0; i < bpmp_ares.clocks_size; i++){
+			// bits[23..0] are the clock id
+			if(bpmp_ares.clock[i] == (clock_req->cmd_and_id & 0x0FFF)){
+				return true;
+			}
+		}
+
+		clk_cmd = (clock_req->cmd_and_id >> 24) & 0x000F;
+
+		// If there is a get info command, allow it no matters the ID
+		if(clk_cmd == CMD_CLK_GET_MAX_CLK_ID ||
+		   clk_cmd == CMD_CLK_GET_ALL_INFO ||
+		   clk_cmd == CMD_CLK_GET_PARENT){
+			return true;
+		}
+
+		deb_error("Error, clock not allowed for: %d, with command: %d", 
+			clock_req->cmd_and_id & 0x0FFF, clk_cmd);
+		return false;
+	}
+
+	deb_error("Error, msg->mrq %d not allowed", msg->mrq);
+
+	return false;
+}
+
+extern int tegra_bpmp_transfer(struct tegra_bpmp *, struct tegra_bpmp_message *);
+extern struct tegra_bpmp *tegra_bpmp_host_device;
+
+#define BUF_SIZE 1024 
+
+/*
+ * Writes to the device
+ */
+
+static ssize_t write(struct file *filep, const char *buffer, size_t len, loff_t *offset)
+{
+
+	int ret = len;
+	struct tegra_bpmp_message *kbuf = NULL;
+	void *txbuf = NULL;
+	void *rxbuf = NULL;
+	void *usertxbuf = NULL;
+	void *userrxbuf = NULL;
+
+	if (len > 65535) {	/* paranoia */
+		deb_error("count %zu exceeds max # of bytes allowed, "
+			"aborting write\n", len);
+		goto out_nomem;
+	}
+
+	deb_info("wants to write %zu bytes\n", len);
+
+
+	ret = -ENOMEM;
+	kbuf = kmalloc(len, GFP_KERNEL);
+
+
+	if (!kbuf)
+		goto out_nomem;
+
+	memset(kbuf, 0, len);
+
+	ret = -EFAULT;
+	
+	// Copy header
+	if (copy_from_user(kbuf, buffer, len)) {
+		deb_error("copy_from_user(1) failed\n");
+		goto out_cfu;
+	}
+
+	if(kbuf->tx.size > 0){
+		txbuf = kmalloc(BUF_SIZE, GFP_KERNEL);
+		if (!txbuf)
+			goto out_nomem;
+		memset(txbuf, 0, BUF_SIZE);
+		if (copy_from_user(txbuf, kbuf->tx.data, kbuf->tx.size)) {
+			deb_error("copy_from_user(2) failed\n");
+			goto out_cfu;
+		}
+	}
+
+	rxbuf = kmalloc(BUF_SIZE, GFP_KERNEL);
+	if (!rxbuf)
+		goto out_nomem;
+	
+	memset(rxbuf, 0, BUF_SIZE);
+	if (copy_from_user(rxbuf, kbuf->rx.data, kbuf->rx.size)) {
+		deb_error("copy_from_user(3) failed\n");
+		goto out_cfu;
+	}	
+
+
+	usertxbuf = (void*)kbuf->tx.data; //save userspace buffers addresses
+	userrxbuf = kbuf->rx.data;
+
+
+	kbuf->tx.data = txbuf; //reassing to kernel space buffers
+	kbuf->rx.data = rxbuf;
+
+	hexDump (DEVICE_NAME ": kbuf", kbuf, len);
+	hexDump (DEVICE_NAME ": txbuf", txbuf, kbuf->tx.size);
+
+	if(!tegra_bpmp_host_device){
+		deb_error("host device not initialised, can't do transfer!");
+		return -EFAULT;
+	}
+
+	if(!check_if_allowed(kbuf)){
+		goto out_cfu;
+	}
+
+	ret = tegra_bpmp_transfer(tegra_bpmp_host_device, (struct tegra_bpmp_message *)kbuf);
+
+
+
+	if (copy_to_user((void *)usertxbuf, kbuf->tx.data, kbuf->tx.size)) {
+		deb_error("copy_to_user(2) failed\n");
+		goto out_notok;
+	}
+
+	if (copy_to_user((void *)userrxbuf, kbuf->rx.data, kbuf->rx.size)) {
+		deb_error("copy_to_user(3) failed\n");
+		goto out_notok;
+	}
+
+	kbuf->tx.data=usertxbuf;
+	kbuf->rx.data=userrxbuf;
+	
+	if (copy_to_user((void *)buffer, kbuf, len)) {
+		deb_error("copy_to_user(1) failed\n");
+		goto out_notok;
+	}
+
+
+
+	kfree(kbuf);
+	return len;
+out_notok:
+out_nomem:
+	deb_error("memory allocation failed");
+out_cfu:
+	kfree(kbuf);
+	kfree(txbuf);
+	kfree(rxbuf);
+    return -EINVAL;
+
+}
+
+static const struct of_device_id bpmp_host_proxy_ids[] = {
+	{ .compatible = "nvidia,bpmp-host-proxy" },
+	{ }
+};
+
+static struct platform_driver bpmp_host_proxy_driver = {
+	.driver = {
+		.name = "bpmp_host_proxy",
+		.of_match_table = bpmp_host_proxy_ids,
+	},
+	.probe = bpmp_host_proxy_probe,
+	.remove = bpmp_host_proxy_remove,
+};
+builtin_platform_driver(bpmp_host_proxy_driver);
\ No newline at end of file
diff --git a/drivers/bpmp-host-proxy/bpmp-host-proxy.h b/drivers/bpmp-host-proxy/bpmp-host-proxy.h
new file mode 100644
index 000000000000..120bb9b046f5
--- /dev/null
+++ b/drivers/bpmp-host-proxy/bpmp-host-proxy.h
@@ -0,0 +1,17 @@
+#ifndef __BPMP_HOST_PROXY__H__
+#define __BPMP_HOST_PROXY__H__
+
+#include <linux/types.h>
+
+#define BPMP_HOST_MAX_CLOCKS_SIZE      256
+#define BPMP_HOST_MAX_RESETS_SIZE      256
+
+struct bpmp_allowed_res {
+	int clocks_size;
+    uint32_t clock[BPMP_HOST_MAX_CLOCKS_SIZE];
+    int resets_size;
+    uint32_t reset[BPMP_HOST_MAX_RESETS_SIZE];
+
+};
+
+#endif
\ No newline at end of file
-- 
2.38.5

